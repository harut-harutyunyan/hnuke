Group {
 name LightMixer
 knobChanged "\nn = nuke.thisNode()\nk = nuke.thisKnob()\nif k.name().endswith(\"_solo\"):\n    val = k.getValue()\n    if val == 1:\n        for kn in n.knobs():\n            if kn.endswith(\"_solo\") and kn!=k.name():\n                n\[kn].setValue(0)\n    aov_name = k.name().rsplit(\"_\", 1)\[0]\n    n.begin()\n    solo_sw = nuke.toNode(\"solo_switch\")\n    solo_sw.setInput(1, nuke.toNode(\"\{\}_mult\".format(aov_name)))\n    solo_sw\[\"which\"].setValue(val)\n    n.end()\nif k.name().endswith(\"_dis\"):\n    aov_name = k.name().rsplit(\"_\", 1)\[0]\n    val = k.getValue()\n    n\[\"\{\}_col\".format(aov_name)].setEnabled(val==0)\n    n\[\"\{\}_intens\".format(aov_name)].setEnabled(val==0)\n    n\[\"\{\}_expo\".format(aov_name)].setEnabled(val==0)\n"
 tile_color 0x8535d5ff
 addUserKnob {20 LightMixer l "Light Mixer"}
 addUserKnob {22 add_aov l "select AOV" -STARTLINE T "node = nuke.thisNode()\n\naov_list = sorted(list(set(\[c.split(\".\")\[0] for c in node.channels()])))\n\ndef autoBackdrop(selNodes=None):\n    if not selNodes:\n        selNodes = nuke.selectedNodes()\n    if not selNodes:\n        return nuke.nodes.BackdropNode()\n\n    for nde in selNodes:\n        x = nde\['xpos'].value()\n        y = nde\['ypos'].value()\n        nde\['xpos'].setValue(x)\n        nde\['ypos'].setValue(y)\n\n    bdX = min(\[nde.xpos() for nde in selNodes])\n    bdY = min(\[nde.ypos() for nde in selNodes])\n    bdW = max(\[nde.xpos() + nde.screenWidth() for nde in selNodes]) - bdX\n    bdH = max(\[nde.ypos() + nde.screenHeight() for nde in selNodes]) - bdY\n\n    margin = 100\n    left, top, right, bottom = (-margin, -margin, margin, margin)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    n = nuke.nodes.BackdropNode(xpos = bdX,\n                                bdwidth = bdW,\n                                ypos = bdY,\n                                bdheight = bdH,\n                                tile_color = 1244014335,\n                                z_order = -10 )\n\n    nuke.zoomToFitSelected()\n\n    n\['selected'].setValue(False)\n    return n\n\nclass ChooseAov(nukescripts.PythonPanel):\n    def __init__(self):\n        super(ChooseAov, self).__init__('Select AOV')\n        self.setMinimumSize(300, 50)\n        self.aov_name = nuke.Enumeration_Knob(\"aov_name\", \"AOV Name: \", \[\"_LGT_\"]+aov_list)\n        self.addKnob(self.aov_name)\n\npanel = ChooseAov()\nif panel.showModalDialog():\n    name = panel.aov_name.value()\n    if name == \"_LGT_\":\n        aov_names = \[l for l in aov_list if l.lower().startswith(\"lgt_\")]\n    else:\n        aov_names = \[name]\n    for aov_name in aov_names:\n        if not node.knob(aov_name+\"_tex\"):\n            for _, cl in node.knobs().items():\n                if isinstance(cl, nuke.Link_Knob) and cl.name()==\"mix\":\n                    node.removeKnob(cl)\n            node.removeKnob(node.knob(\"mix_div\"))\n            node.removeKnob(node.knob(\"credit\"))\n            node.addKnob(nuke.Text_Knob(aov_name+\"_tex\", \"\",  '<font size=4 color=\"orange\">\{\}</font>\\n'.format(aov_name)))\n            \n            knob = nuke.Boolean_Knob(aov_name + \"_solo\", \"<font color=\\\"green\\\"><b>\[S]</b></font>\")\n            node.addKnob(knob)\n            knob.setFlag(nuke.STARTLINE)\n            \n            knob = nuke.Boolean_Knob(aov_name + \"_mute\", \"<font color=\\\"red\\\"><b>\[M]</b></font>\")\n            node.addKnob(knob)\n            knob.clearFlag(nuke.STARTLINE)\n\n            knob = nuke.Boolean_Knob(aov_name + \"_dis\", \"<font color=\\\"orange\\\"><b>\[D]</b></font>\")\n            node.addKnob(knob)\n            knob.clearFlag(nuke.STARTLINE)\n            \n            knob = nuke.Boolean_Knob(aov_name + \"_inject\", \"inject\")\n            knob.setValue(1)\n            node.addKnob(knob)\n            knob.clearFlag(nuke.STARTLINE)\n\n            knob_script = \"\"\"\nnode = nuke.thisNode()\nknob = nuke.thisKnob()\n\nnn = knob.name().rsplit(\"_\", 1)\[0]\nnode.begin()\nbdrp = nuke.toNode(\"__\{\}__\".format(nn))\nif bdrp:\n    \[nuke.delete(n) for n in bdrp.getNodes()+\[bdrp]]\nnode.end()\nnode.removeKnob(node\[\"\{\}_tex\".format(nn)])\nnode.removeKnob(node\[\"\{\}_solo\".format(nn)])\nnode.removeKnob(node\[\"\{\}_mute\".format(nn)])\nnode.removeKnob(node\[\"\{\}_dis\".format(nn)])\nnode.removeKnob(node\[\"\{\}_inject\".format(nn)])\nnode.removeKnob(node\[\"\{\}_del\".format(nn)])\nnode.removeKnob(node\[\"\{\}_col\".format(nn)])\nnode.removeKnob(node\[\"\{\}_intens\".format(nn)])\nnode.removeKnob(node\[\"\{\}_expo\".format(nn)])\nnode.removeKnob(node\[\"\{\}_div\".format(nn)])\n\n        \"\"\"\n            knob = nuke.PyScript_Knob(aov_name + \"_del\", \"X\", knob_script)\n            node.addKnob(knob)\n            knob.clearFlag(nuke.STARTLINE)\n            \n            knob = nuke.Color_Knob(aov_name + \"_col\", \"Color\")\n            knob.setValue(1)\n            knob.setSingleValue(False)\n            node.addKnob(knob)\n            \n            knob = nuke.Double_Knob(aov_name + \"_intens\", \"Intensity\")\n            knob.setValue(1)\n            knob.setRange(0, 5)\n            node.addKnob(knob)\n            \n            knob = nuke.Double_Knob(aov_name + \"_expo\", \"Exposure\")\n            knob.setValue(0)\n            knob.setRange(-5, 5)\n            node.addKnob(knob)\n\n            knob = nuke.Text_Knob(aov_name + \"_div\", \"\")\n            node.addKnob(knob)\n\n            knob = nuke.Link_Knob(\"mix\", \"mix\")\n            knob.setLink(\"merge_mask.mix\")\n            node.addKnob(knob)\n\n            knob = nuke.Text_Knob(\"mix_div\", \"\")\n            node.addKnob(knob)\n\n            knob = nuke.Text_Knob(\"credit\",\"\", \"<font style=\\\"color:#666\\\"><br/><b>Harut Harutyunyan</b> - har8unyan@gmail.com</font>\")\n            node.addKnob(knob)\n\n            node.begin()\n            output = nuke.toNode(\"Output1\")\n            merge_mask = nuke.toNode(\"merge_mask\")\n            mask = nuke.toNode(\"mask\")\n            solo_sw = nuke.toNode(\"solo_switch\")\n            inpt  = solo_sw.input(0)\n            shuffle = nuke.nodes.Shuffle()\n            shuffle\[\"in\"].setValue(aov_name)\n            shuffle.setInput(0, inpt)\n            shuffle.setXYpos(inpt.xpos()-150, inpt.ypos()+220)\n            m_from = nuke.nodes.Merge2(operation=\"from\", output=\"rgb\", bbox=\"B\")\n            m_from.setInput(0, inpt)\n            m_from.setInput(1, shuffle)\n            m_from.setXYpos(inpt.xpos(), shuffle.ypos())\n            m_plus = nuke.nodes.Merge2(operation=\"plus\", output=\"rgb\", bbox=\"B\")\n            shuffle_copy = nuke.nodes.ShuffleCopy(out = aov_name)\n            shuffle_copy\[\"in\"].setValue(\"rgb\")\n            shuffle_copy\[\"red\"].setValue(\"red\")\n            shuffle_copy\[\"green\"].setValue(\"green\")\n            shuffle_copy\[\"blue\"].setValue(\"blue\")\n            shuffle_copy\[\"alpha\"].setValue(\"black\")\n            shuffle_copy.setInput(0, m_from)\n            shuffle_copy.setXYpos(inpt.xpos(), m_from.ypos()+100)\n            shuffle_copy\[\"disable\"].setExpression(\"1-\{\}_inject\".format(aov_name))\n            m_plus.setInput(0, shuffle_copy)\n            m_plus.setXYpos(inpt.xpos(), m_from.ypos()+130)\n            m_plus\[\"disable\"].setExpression(\"\{\}_mute\".format(aov_name))\n            solo_sw.setInput(0, m_plus)\n            solo_sw.setXYpos(inpt.xpos()+150, m_plus.ypos()+220)\n            merge_mask.setXYpos(solo_sw.xpos(), m_plus.ypos()+250)\n            mask.setXYpos(solo_sw.xpos()+150, m_plus.ypos()+250)\n            output.setXYpos(inpt.xpos(), m_plus.ypos()+280)\n            color_n = nuke.nodes.Multiply(channels = \"rgb\")\n            color_n\[\"value\"].setSingleValue(False)\n            color_n.setName(\"color\")\n            color_n\[\"value\"].setExpression(expression=\"parent.\{\}_col.r\".format(aov_name), channel=0)\n            color_n\[\"value\"].setExpression(expression=\"parent.\{\}_col.g\".format(aov_name), channel=1)\n            color_n\[\"value\"].setExpression(expression=\"parent.\{\}_col.b\".format(aov_name), channel=2)\n            color_n.setInput(0, shuffle)\n            color_n.setXYpos(shuffle.xpos(), shuffle.ypos()+50)\n            mult_n = nuke.nodes.Multiply(channels = \"rgb\")\n            mult_n.setName(\"\{\}_mult\".format(aov_name))\n            mult_n\[\"value\"].setExpression(\"pow(2, \{0\}_expo) * \{0\}_intens\".format(aov_name))\n            mult_n.setInput(0, color_n)\n            mult_n.setXYpos(color_n.xpos(), color_n.ypos()+50)\n            color_n\[\"disable\"].setExpression(\"\{\}_dis\".format(aov_name))\n            mult_n\[\"disable\"].setExpression(\"\{\}_dis\".format(aov_name))\n            shuffle_copy.setInput(1, mult_n)\n            m_plus.setInput(1, mult_n)\n            bdrp = autoBackdrop(\[shuffle, m_from, m_plus])\n            bdrp.setName(\"__\{\}__\".format(aov_name))\n            node.end()"}
 addUserKnob {26 ""}
 addUserKnob {41 mix T merge_mask.mix}
 addUserKnob {26 mix_div l "" +STARTLINE}
 addUserKnob {26 credit l "" +STARTLINE T "<font style=\"color:#666\"><br/><b>Harut Harutyunyan</b> - har8unyan@gmail.com</font>"}
}
 Input {
  inputs 0
  name mask
  xpos 224
  ypos 4341
  number 1
 }
 Input {
  inputs 0
  name Input
  xpos -76
  ypos 4218
 }
set Nb8aab400 [stack 0]
push $Nb8aab400
 Switch {
  inputs 2
  name solo_switch
  xpos 74
  ypos 4311
 }
push $Nb8aab400
 Merge2 {
  inputs 2+1
  operation copy
  also_merge all
  name merge_mask
  xpos 74
  ypos 4341
 }
 Output {
  name Output1
  xpos -76
  ypos 4371
 }
end_group
